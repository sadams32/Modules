---
title: "Module-6"
format: html
editor: visual
---

### Module 6

```{r} 
library(tidyverse)
```

### Challenge 1

# Load the Country-Data-2016 into a data frame varaible, d, and summarize the variables in that data frame. You can load the .csv file with a link or from local file so I'm going to try both.

# Load with link/curl
```{r}
library(curl)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN588_Fall23/Country-Data-2016.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
```

## OR
# Load from local file
```{r}
f <- "~/Desktop/Country-Data-2016.csv"
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
```

```{r}
summary(d)
```

```{r}
names(d)
```

# Create a new pop_density variable in your data frame which is population / area. What are the 10 most dense countries? The 10 least dense?

# Most
```{r}
d$pop_density <- d$population/d$area
d <- d[order(-d$pop_density), ]
d[1:10, ]
```

# Least
```{r}
d <- d[order(d$pop_density), ]
d[1:10, ]
```

# Extract data from the 20 largest countries into a new variable (I believe a new varaible refers to a new dataframe (NOT d)). What are the median area and population size of these countries?
```{r}
big_20 <- d[order(-d$area), ] [1:20,]
summary(big_20)
```

## OR
```{r}
mean(new$population, na.rm = TRUE)
mean(new$area, na.rm = TRUE)
```

# Extract data from all countries beginning with the letters “A” through “F”. What are the mean area and population size of these countries?
# grep looks for A-F anywhere in the name of the country
```{r}
a_to_f <- d[grep("[A-F]", d$country), ]
summary(a_to_f)
```

### Challenge 2

```{r}
par(mfrow = c(2, 3))
boxplot(d$population)
boxplot(log(d$population))
boxplot(d$area)
boxplot(log(d$area))
barplot(d$population)
barplot(d$area)
```

### Challenge 3

# Make histograms of the log() transformed population and area data from the Country-Data-2016 file. Explore what happens if you set freq=FALSE versus the default of freq=TRUE. Try looking at other variables as well.
# Setting the argument freq=FALSE will scale the Y axis to represent the proportion of observations falling into each bin rather than the count.

```{r}
par(mfrow = c(1, 2))  # gives us two panels
attach(d)
hist(log(population), freq = FALSE, col = "red", main = "Plot 1", xlab = "log(population size)",
    ylab = "density", ylim = c(0, 0.2))
hist(log(area), freq = FALSE, col = "red", main = "Plot 2", xlab = "log(area)",
    ylab = "density", ylim = c(0, 0.2))
```

# NOTE: You can add a line to your histograms (e.g., to show the mean value for a variable) using the abline() command, with arguments. For exmaple, to show a single vertical line representing the mean log(population size), you would add the argument v=mean(log(population)))

# Density plot : The density() function computes a non-parametric estimate of the distribution of a variable, which can be combined with plot() to also yield a graphical view of the distribution of the data. If your data have missing values, then you need to add the argument na.rm=TRUE to the density() function. To superimpose a density() curve on a histogram, you can use the lines(density()) function.
```{r}
par(mfrow = c(1, 1))  # set up one panel and redraw the log(population) histogram
hist(log(population), freq = FALSE, col = "white", main = "My Plot with Mean and Density",
    xlab = "log(population size)", ylab = "density", ylim = c(0, 0.2))
abline(v = mean(log(population), na.rm = TRUE), col = "blue")
lines(density(log(population), na.rm = TRUE), col = "green")
```

```{r}
detach(d)
```

# Tables: the table() function can be used to summarize counts and proportions for categorical variables in your dataset.
# Using the table() function, find what is the most common form of government in the Country-Data-2016 dataset. How many countries have that form? HINT: We can combine table() with sort() and the argument decreasing=TRUE to get the desired answered straight away:
```{r}
sort(table(d$govt_form), decreasing = TRUE)
```

### Challenge 5

